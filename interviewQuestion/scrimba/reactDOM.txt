What is the difference between the virtual DOM and the real DOM?


The DOM represents an HTML document as a tree structure wherein each node represents part of the document (for example, an element, element attribute, or text):

Using vanilla JavaScript and the DOM API, you can access any element you like (for example, using document.getElementById) and update it directly.

When you do this, the browser traverses the DOM and re-renders each node - even if that node hasn't changed since the previous render. This can be noticeably inefficient 😳

Imagine a scenario where you need to update only one tr of 10,000 in a table. Rendering all 10,000 rows will almost certainly lead to a drop in frames, potentially causing the table to flicker and interrupt the user's experience.

This is where React's virtual DOM (VDOM) comes into play ✅.

React increases your UI's performance by building a "virtual" representation of the DOM (a VDOM 😉) to keep track of all the changes it needs to make to the real DOM.

Every time your app's state updates, React builds a new VDOM and diffs with the previous VDOM to determine what changes are necessary before updating the DOM directly and efficiently:

🔑 The important thing to mention here is diffing. If you want to flex a little, you can describe this process by its technical name, which is reconciliation (React reconciles the newly-built VDOM with the previous one)
📝 Learn more
React's documentation on VDOM
For an alternative viewpoint, we also recommend you read Virtual DOM is pure overhead
⛔️ A common misconception is that the VDOM is a React feature. This is not true! VDOM is a programming concept that predates React and is adopted by many UI libraries, including Vue